
==================== FINAL INTERFACE ====================
2018-09-17 08:40:21.111055 UTC

interface haskell-tutes-0.1.0.0-7TKq6HTn4VZFi18Zn4nbmB:Exercises 8022
  interface hash: f1be93b088dda7cc064f70c75060e4e2
  ABI hash: dadebeef9c5a425e5abf1dba7986942d
  export-list hash: fefce93cc661b0b9834ee96f52c57b95
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0451a77cc0d8e5d99d548d6441c7dd35
  sig of: Nothing
  used TH splices: False
  where
exports:
  Exercises.filtering
  Exercises.lift
  Exercises.replicateA
  Exercises.sequence
module dependencies: Applicative Base Functor
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Err 514b3a24b22e9d7d731c2d0d02d10842
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  Applicative f2d97fdeeaa97f9c471b9e10f376203e
  exports: 2fcb700f7e628d0a02110df98d07ba28
  <$> 2cfe2df6c2f8556428934193adaf5f32
  <*> de57abc21012995b1e52b52926cf4bc7
  Applicative 3460dfa1f5af04523439ffbdb93d9019
  pure 8f673320cd0a9a9ccacc60345bcab362
import  -/  Base 3a2b43282c6fec09282a5d6aab507fbf
  exports: 185edd00dc52698b6b2121e95e283db0
73f28e6543b71a0fa878df361e6c5fe8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Exercises.$trModule3
                   Exercises.$trModule1) -}
2b50e4f9fe5e27e0ccbcca68a120b116
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$trModule2) -}
a6226f51e257c498fc2181e88eefb3fd
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exercises"#) -}
a224771108b7515c4f1690c3d934c411
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Exercises.$trModule4) -}
f5af10400328955bf5b53b9c94332c69
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("haskell-tutes-0.1.0.0-7TKq6HTn4VZFi18Zn4nbmB"#) -}
2ec164e99bf45dfbf8dc29a004063d5f
  $wreplicateA ::
    Applicative.Applicative f => GHC.Prim.Int# -> f a -> f [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(A,C(U),C(C1(U)))><S,1*U><L,U>, Inline: [0] -}
cc5ce1a7d7fce4a0e96d567db1948868
  filtering ::
    Applicative.Applicative f =>
    (a -> f GHC.Types.Bool) -> [a] -> f [a]
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ @ f :: * -> *
                   @ a
                   ($dApplicative :: Applicative.Applicative f) ->
                 Exercises.filtering1 @ f @ a) -}
951a3601af04c977111094316eb0127f
  filtering1 :: (a -> f GHC.Types.Bool) -> [a] -> f [a]
  {- Strictness: x -}
3f7ce09c88684260947bb9a7a7b25ff5
  lift ::
    Applicative.Applicative f => (a -> b -> c) -> f a -> f b -> f c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,1*C1(U),C(C1(U)))><L,U><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ f :: * -> *
                   @ a
                   @ b
                   @ c
                   ($dApplicative :: Applicative.Applicative f)
                   (f1 :: a -> b -> c)
                   (a1 :: f a)
                   (b1 :: f b) ->
                 Applicative.<*>
                   @ f
                   $dApplicative
                   @ b
                   @ c
                   (Applicative.<*>
                      @ f
                      $dApplicative
                      @ a
                      @ (b -> c)
                      (Applicative.pure @ f $dApplicative @ (a -> b -> c) f1)
                      a1)
                   b1) -}
5840d19a538625603be76e58f8586c92
  replicateA ::
    Applicative.Applicative f => GHC.Types.Int -> f a -> f [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(A,C(U),C(C1(U)))><S(S),1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   @ a
                   (w :: Applicative.Applicative f)
                   (w1 :: GHC.Types.Int)
                   (w2 :: f a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Exercises.$wreplicateA @ f @ a w ww1 w2 }) -}
098ee817112e2c64406cb1d34bb1a548
  sequence :: Applicative.Applicative f => [f a] -> f [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,U(A,C(U),C(C1(U)))><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

