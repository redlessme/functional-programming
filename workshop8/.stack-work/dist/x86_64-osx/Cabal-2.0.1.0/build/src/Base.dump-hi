
==================== FINAL INTERFACE ====================
2018-09-17 01:05:54.00622 UTC

interface haskell-tutes-0.1.0.0-7TKq6HTn4VZFi18Zn4nbmB:Base 8022
  interface hash: 04a9e58c047ddccbfafdb4c2d3c82938
  ABI hash: 3a2b43282c6fec09282a5d6aab507fbf
  export-list hash: 185edd00dc52698b6b2121e95e283db0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bd29246931572356afdc42a66f13eebb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Base.Id{Base.Id}
  Base.Pair{Base.Pair}
  Base.RoseTree{Base.Nil Base.Node}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
c00e45af4b5bc7d349da9f7b1addef73
  $fShowId :: GHC.Show.Show a => GHC.Show.Show (Base.Id a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Base.Id a)
                  (Base.$fShowId_$cshowsPrec @ a v)
                  (Base.$fShowId_$cshow @ a v)
                  (Base.$fShowId_$cshowList @ a v) -}
0646b8ea4111c673553286a10c6b41f8
  $fShowId1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
98526104a2cd9e81e5b9573b7262e3ab
  $fShowId2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Base.$fShowId3) -}
d4aa79a36dc52cf3e13b9d1fffde9df2
  $fShowId3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id "#) -}
571651d969e06d1bfa0631b2447420e3
  $fShowId4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
c00e45af4b5bc7d349da9f7b1addef73
  $fShowId_$cshow :: GHC.Show.Show a => Base.Id a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Base.Id a) ->
                 case x of wild { Base.Id b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Base.$fShowId2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Base.$fShowId4
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
c00e45af4b5bc7d349da9f7b1addef73
  $fShowId_$cshowList ::
    GHC.Show.Show a => [Base.Id a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Base.Id a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Base.Id a)
                   (Base.$fShowId_$cshowsPrec @ a $dShow Base.$fShowId1)
                   eta
                   eta1) -}
c00e45af4b5bc7d349da9f7b1addef73
  $fShowId_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Base.Id a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Base.Id a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Base.Id ww3 ->
                 Base.$w$cshowsPrec @ a w ww1 ww3 } }) -}
9c6d8724b0d58d81111a5efb51480dba
  $fShowPair :: GHC.Show.Show a => GHC.Show.Show (Base.Pair a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(C(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Base.Pair a)
                  (Base.$fShowPair_$cshowsPrec @ a v)
                  (Base.$fShowPair_$cshow @ a v)
                  (Base.$fShowPair_$cshowList @ a v) -}
a79b8e9e3cd0514f8db041fe2980df70
  $fShowPair1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pair "#) -}
9c6d8724b0d58d81111a5efb51480dba
  $fShowPair_$cshow ::
    GHC.Show.Show a => Base.Pair a -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Base.Pair a) ->
                 Base.$fShowPair_$cshowsPrec
                   @ a
                   $dShow
                   Base.$fShowId1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9c6d8724b0d58d81111a5efb51480dba
  $fShowPair_$cshowList ::
    GHC.Show.Show a => [Base.Pair a] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Base.Pair a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Base.Pair a)
                   (Base.$fShowPair_$cshowsPrec @ a $dShow Base.$fShowId1)
                   eta
                   eta1) -}
9c6d8724b0d58d81111a5efb51480dba
  $fShowPair_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Base.Pair a -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Base.Pair a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Base.Pair ww3 ww4 ->
                 Base.$w$cshowsPrec1 @ a w ww1 ww3 ww4 } }) -}
729d81f3958e6390060a769a91cf1af7
  $fShowRoseTree ::
    GHC.Show.Show a => GHC.Show.Show (Base.RoseTree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Base.RoseTree a)
                  (Base.$fShowRoseTree_$cshowsPrec @ a v)
                  (Base.$fShowRoseTree_$cshow @ a v)
                  (Base.$fShowRoseTree_$cshowList @ a v) -}
729d81f3958e6390060a769a91cf1af7
  $fShowRoseTree_$cshow ::
    GHC.Show.Show a => Base.RoseTree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Base.RoseTree a) ->
                 Base.$fShowRoseTree_$cshowsPrec
                   @ a
                   $dShow
                   Base.$fShowId1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
729d81f3958e6390060a769a91cf1af7
  $fShowRoseTree_$cshowList ::
    GHC.Show.Show a => [Base.RoseTree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Base.RoseTree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Base.RoseTree a)
                   (Base.$fShowRoseTree_$cshowsPrec @ a $dShow Base.$fShowId1)
                   eta
                   eta1) -}
729d81f3958e6390060a769a91cf1af7
  $fShowRoseTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Base.RoseTree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><L,1*U(U)><S,1*U> -}
84870786d5218271cd59dc815fabd0b3
  $tc'Id :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3911943668186827074##
                   18263759946820247898##
                   Base.$trModule
                   Base.$tc'Id2
                   1#
                   Base.$tc'Id1) -}
078ee00019c3b7590b6d9fdaca0840df
  $tc'Id1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d483cf5a3f686d3c48840f278384603e
  $tc'Id2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tc'Id3) -}
3c7b779c1802b6802b45c65ca70f68c3
  $tc'Id3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Id"#) -}
96c174d94b8139766c040b96303eb173
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3890103059774408987##
                   4661907026378939862##
                   Base.$trModule
                   Base.$tc'Nil2
                   1#
                   Base.$tc'Nil1) -}
63cbab345bce3ba2502f26cb016a42dc
  $tc'Nil1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
5b848b0f4ea805d1c4363f1b30dd6dac
  $tc'Nil2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tc'Nil3) -}
946967a2592014ab1722df87c22b6612
  $tc'Nil3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Nil"#) -}
0a3ca82ed0b60c4192f02c0fce1554e3
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3355147075688365932##
                   15144244351811852845##
                   Base.$trModule
                   Base.$tc'Node2
                   1#
                   Base.$tc'Node1) -}
fd8b8c01a743dbd629de71692de8ad2b
  $tc'Node1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7c90cc8e751da203629cd5a5b7faa2d5
  $tc'Node2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tc'Node3) -}
d3dcc8d84e7622a94d7a3c41e0648e9f
  $tc'Node3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Node"#) -}
2edc2594aa1c4979de515392eda3df38
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10764561682095426418##
                   7150593136731447221##
                   Base.$trModule
                   Base.$tc'Pair2
                   1#
                   Base.$tc'Pair1) -}
7cbf455313707c54112649251d533294
  $tc'Pair1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6831f046ceab88c8f6435a4fa2fda3a0
  $tc'Pair2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tc'Pair3) -}
f701b1fc7040201a1bd312a4813c01de
  $tc'Pair3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pair"#) -}
08738042e318368f085de0580cdae79e
  $tcId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5058020676826253067##
                   18006222288745413396##
                   Base.$trModule
                   Base.$tcId1
                   0#
                   GHC.Types.krep$*Arr*) -}
bd6f5ddf323fe6f52d65c167b12b5365
  $tcId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tcId2) -}
9731d1112c1f4145e6281b6e52912b80
  $tcId2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Id"#) -}
808572bc070a57d93f976b68b26a4030
  $tcPair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5411884920107594084##
                   15972272363996346180##
                   Base.$trModule
                   Base.$tcPair1
                   0#
                   GHC.Types.krep$*Arr*) -}
e2f94675b420fb9ea39dabbd6af05c90
  $tcPair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tcPair2) -}
087c2d11657943c7cda85388c0b65cd2
  $tcPair2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pair"#) -}
f89155959391705a7a6605b8f443f552
  $tcRoseTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11094907898713514984##
                   16891070183108748583##
                   Base.$trModule
                   Base.$tcRoseTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
34238649fbb5ceb440ee7f4dccca3cda
  $tcRoseTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$tcRoseTree2) -}
8f242fa4f87481829101e80087c5894e
  $tcRoseTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RoseTree"#) -}
a06abe1c987a56ff8dd4598e673ba2cc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Base.$trModule3 Base.$trModule1) -}
0afe780bf31e51bef008efb7577b7262
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$trModule2) -}
03b52f8c04960fa946ed79a52fb714f0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Base"#) -}
38ff985fef4649b1c67569bb54bd0a55
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Base.$trModule4) -}
36a42e693a12f58fad404848911fd0ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("haskell-tutes-0.1.0.0-7TKq6HTn4VZFi18Zn4nbmB"#) -}
996c8d18ae41d15eac0a3a42efa59e3a
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Base.$fShowId4 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Base.$fShowId2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Base.$fShowId2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
e73834adf6ea0149351b33f3fdd0f2c8
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> a -> a -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Base.$fShowId4 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Base.$fShowId4 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Base.$fShowPair1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Base.$fShowPair1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
c00e45af4b5bc7d349da9f7b1addef73
  data Id a = Id a
9c6d8724b0d58d81111a5efb51480dba
  data Pair a = Pair a a
729d81f3958e6390060a769a91cf1af7
  data RoseTree a = Nil | Node a [Base.RoseTree a]
instance [safe] GHC.Show.Show [Base.Id] = Base.$fShowId
instance [safe] GHC.Show.Show [Base.Pair] = Base.$fShowPair
instance [safe] GHC.Show.Show [Base.RoseTree] = Base.$fShowRoseTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

